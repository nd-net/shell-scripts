#!/usr/bin/env python
from __future__ import print_function

def list_to_dict(source):
    """
    Converts a list into a dictionary with the list indices as dictionary keys.
    
    >>> list_to_dict(['a', 'b', 'c'])
    {0: 'a', 1: 'b', 2: 'c'}
    >>> list_to_dict([])
    {}
    """
    return dict(enumerate(source))

def dict_to_list(source):
    """
    Converts a dictionary into a list, using the values of the dictionary alongside their sorted keys. The keys can have gaps which are ignored by this function.
    
    >>> dict_to_list({0: 'a', 1: 'b', 2: 'c'})
    ['a', 'b', 'c']
    >>> dict_to_list({})
    []
    >>> dict_to_list({0: 'a', 1: 'b', 5: 'f'})
    ['a', 'b', 'f']
    
    """
    return [item[1] for item in sorted(source.items())]

def merge(target, patch):
    """
    Merges a target with a patch, using the extended JSON merge patch algorithm. Lists are merged as if they were dicts with their indices as keys.
    
    >>> merge({}, {})
    {}
    >>> merge({}, 1)
    1
    >>> merge({}, 'a')
    'a'
    >>> merge({}, {'a': 1})
    {'a': 1}
    >>> merge({'a': 0}, {'a': 1})
    {'a': 1}
    >>> merge({'a': 0}, {'a': None})
    {}
    >>> merge({'a': 0, 'b': 1}, {'a': 1})
    {'a': 1, 'b': 1}
    >>> merge([1, 2, 3], [3, 2, 1])
    [3, 2, 1]
    >>> merge([1, 2, 3, 4], [3, 2, 1])
    [3, 2, 1, 4]
    >>> merge([1, 2, 3], [None])
    [2, 3]
    >>> merge({'hello': [{'target': 'world' }, {'target': 'universe' }]}, {'hello': [{}, None]})
    {'hello': [{'target': 'world'}]}
    """
    if isinstance(patch, dict):
        target = dict(target) if isinstance(target, dict) else {}
        for key, value in patch.items():
            if value is not None:
                target[key] = merge(target.get(key), value)
            elif key in target:
                del target[key]
        return target
    elif isinstance(patch, list):
        target = list(target) if isinstance(target, list) else []
        return dict_to_list(merge(list_to_dict(target), list_to_dict(patch)))
    else:
        return patch

def diff(original, change, diffEqualDictValues=False):
    if isinstance(change, dict):
        if not isinstance(original, dict):
            return change
        result = {}
        for key in set(original.keys()) - set(change.keys()):
            result[key] = None
            
        for key, value in change.items():
            originalValue = original.get(key)
            if originalValue is None:
                result[key] = value
            elif diffEqualDictValues or originalValue != value:
                result[key] = diff(originalValue, value)
        return result
    elif isinstance(change, list):
        if not isinstance(original, list):
            original = []
        return dict_to_list(diff(list_to_dict(original), list_to_dict(change), True))
    else:
        return change

def merge_files(files):
    import json
    result = None
    for file in files:
        import_json = json.load(file)
        if result is None:
            result = import_json
        else:
            result = merge(result, import_json)
    return result

def diff_files(original, target):
    import json
    original_json = json.load(original)
    target_json = json.load(target)
    return diff(original_json, target_json)

def dump(item, output):
    import json
    text = json.dumps(item, indent=4) if item is not None else ""
    if output:
        with open(output, "w+t") as target:
            target.write(text)
    else:
        print(text)

def main():
    import argparse
    parser = argparse.ArgumentParser()
    
    subparsers = parser.add_subparsers(dest="subparser_name")
    parser_merge = subparsers.add_parser("merge", help="Merge JSON documents together using JSON merge patch")

    parser_merge.add_argument("-o", "--output", help="path of output file, if none specified will print to stdout")
    parser_merge.add_argument("files", help="JSON files to merge in order", nargs="+", type=argparse.FileType("r"))

    parser_create_patch = subparsers.add_parser(
        "diff", help="Make a patch file comparing two JSON files")

    parser_create_patch.add_argument("-o", "--output", help="path of output file, if none specified will print to stdout")
    parser_create_patch.add_argument("original", help="JSON file you want to patch", type=argparse.FileType("r"))
    parser_create_patch.add_argument("target", help="JSON files to merge in order", type=argparse.FileType("r"))
    
    subparsers.add_parser("test", help="Test the tool for integrity")

    args = parser.parse_args()   
    if args.subparser_name == "merge":
        dump(merge_files(args.files), args.output)
    elif args.subparser_name == "diff":
        dump(diff_files(args.original, args.target), args.output)
    elif args.subparser_name == "test":
        import doctest
        doctest.testmod()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()