#!/usr/bin/env python3
import plistlib

def natural_comparison(key):
    import re
    return [int(text) if text.isdigit() else text.lower() for text in re.split('([0-9]+)', key)]

def sortedDict(value, key=None):
    from collections import OrderedDict
    if not isinstance(value, dict):
        return value
    return OrderedDict((key, sortedDict(value[key], key=key)) for key in sorted(value, key=key))

def sort(file, format, key=None):
    data = plistlib.load(file)
    sortedData = sortedDict(data, key)
    file.seek(0)
    plistlib.dump(sortedData, file, fmt=format)
    file.close()

def parse_args():
    import argparse
    formats = {
        "xml": plistlib.FMT_XML,
        "binary": plistlib.FMT_BINARY,
    }

    parser = argparse.ArgumentParser(description="Sort a plist file's keys by name.")
    parser.add_argument('file', type=argparse.FileType('r+b'), help='the file to process')
    parser.add_argument('-f', '--format', choices=formats, default="xml",
                        help='the output format for the file being processed. Defaults to %(default)s')
    parser.add_argument('-n', '--natural', dest='key', action='store_const', const=natural_comparison, help='use natural sorting, i.e. sort "10" after "1"')

    result = parser.parse_args()
    result.format = formats[result.format]
    return result

args = parse_args()
sort(args.file, args.format, key=args.key)
