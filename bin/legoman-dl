#!/usr/bin/env python3

from collections import namedtuple

LegoSet = namedtuple("LegoSet", ("id", "name", "launch_year", "theme_name", "instructions"))
LegoInstruction = namedtuple("LegoInstruction", ("name", "URL", "alternative", "part"), defaults=((1,1),))

def lego_set_fullname(lego_set):
    return f"[{lego_set.id}] {lego_set.name}"

def get_set_metadata(set_id):
    from urllib.request import urlopen
    import json
    
    with urlopen(f"https://www.lego.com//service/biservice/search?prefixText={set_id}") as response:
        return json.load(response)

def parse_instruction_metadata(building_instructions):
    import re
    mapping = {
        "name": "description",
        "URL": "pdfLocation",
        "alternative": "isAlternative"
    }
    part_matcher = re.compile(r"\b(\d)/(\d)\b")
    
    # sort instructions by part (1/2, 2/2) so that they get combined appropriately
    result = []
    for building_instruction in building_instructions:
        value = {k: building_instruction[v] for k, v in mapping.items()}
        instruction = LegoInstruction(**value)
        partNumbers = part_matcher.search(instruction.name)
        part = [int(i) for i in partNumbers.groups()] if partNumbers else [1, 1]
        instruction = instruction._replace(part=tuple(part))
        result.append(instruction)
    
    result.sort(key=lambda it: (it.alternative, it.part[1], it.part[0], it.name))
    return result
    
def filter_instruction_metadata(instructions):
    import re
    iso_size = re.compile(r"[vV][\.\s]*29|\bVA\b")
    us_size = re.compile(r"[vV][\.\s]*39|\bNA\b")
    
    def filter(list, *expressions):
        for expression in expressions:
            if len(list) == 1:
                return list
            filtered = [i for i in list if expression(i.name)]
            if filtered:
                value = filtered
        return value
    
    byPart = {}
    for it in instructions:
        byPart.setdefault((it.alternative, it.part[1], it.part[0]), []).append(it)
    for key in sorted(byPart):
        alternative, to, index = key
        value = byPart[key]
        if not alternative:
            # alternative instructions don't have a V29/V39|NA/VA indicator for US or Europe
            value = filter(value, 
                lambda i: not us_size.search(i),
                lambda i: iso_size.search(i)
            )
        for entry in value:
            yield entry

def parse_set_metadata(set_id, metadata):
    products = metadata["products"]
    
    if len(products) != 1:
        raise NameError(f"The set ID {set_id} has {len(products)} products associated with it")
    product = products[0]
    mapping = {
        'id': 'productId',
        'launch_year': 'launchYear',
        'name': 'productName',
        'theme_name': 'themeName',
        'instructions': 'buildingInstructions',
    }

    lego_set = LegoSet(**{k: product[v] for k, v in mapping.items()})
    instructions = lego_set.instructions
    instructions = parse_instruction_metadata(instructions)
    instructions = filter_instruction_metadata(instructions)
    return lego_set._replace(instructions=list(instructions))

def create_pdf(lego_set, name):
    from PyPDF2 import PdfFileReader, PdfFileMerger
    from urllib.request import urlopen
    from io import BytesIO
    merger = PdfFileMerger()
    metadata = {}
    bookmark = lego_set.name

    for instruction in lego_set.instructions:
        with urlopen(instruction.URL) as response:
            buffer = BytesIO(response.read())
            pdf = PdfFileReader(buffer)
            metadata.update(pdf.documentInfo)
            if instruction.alternative:
                bookmark = instruction.name
            merger.append(buffer, bookmark=bookmark)
            bookmark = None
            
    metadata.update({
            "/Author": "Lego",
            "/Company": "Lego",
            "/Title": name,
            "/Producer" : "Lego Instruction Downloader",
            "/Keywords": ", ".join(str(i) for i in [lego_set.id, lego_set.name, lego_set.theme_name, lego_set.launch_year]),
            "/Subject": f"Gebrauchsanweisung",
    })
    for key in ("/CreationDate", "/ModDate"):
        if not metadata.get(key):
            metadata[key] = "D:{lego_set.launch_year}0101000000Z"
    merger.addMetadata(metadata)
    return merger

def cleanup(name):
    import re
    return re.subn("[^][\(\)^a-zA-Z0-9\. -]", "", name)[0]

def parse_args():
    import argparse
    
    parser = argparse.ArgumentParser(description="Download PDFs for Lego manuals based on a set ID into the current directory.")
    parser.add_argument("set_ids", metavar="set-id", nargs="+", help="the ID of a Lego set, typically a 5 or 4 digit number, e.g. 42042 for the Crawler Crane set")
    parser.add_argument("-fn", "--filename", metavar="template", default="[{id}] {name}", help="the template to use for the file name.\nThe template may contain the following placeholders: {}.\nDefault: '%(default)s'".format(", ".join(LegoSet._fields)))
    parser.add_argument("-v", "--verbose", action="store_true", help="show verbose progress information")
    
    return parser.parse_args()

def process_set(set_id, template, verbose=False):
    if verbose:
        print(f"Getting metadata for {set_id}")
    metadata = get_set_metadata(set_id)
    lego_set = parse_set_metadata(set_id, metadata)
    name = template.format(**lego_set._asdict())
    if verbose:
        print(f"Downloading PDF for {lego_set.id}: {name}")
    pdf = create_pdf(lego_set, name)
    filename = cleanup(name) + ".pdf"
    if verbose:
        print(f"Saving PDF for {lego_set.id} {lego_set.name} to {filename}")
    with open(filename, "wb") as out:
        pdf.write(out)

if __name__ == "__main__":
    args = parse_args()
    for set_id in args.set_ids:
        try:
            process_set(set_id, args.filename, args.verbose)
        except Exception as e:
            print(e)
